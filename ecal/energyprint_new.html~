<!-- SPDX-License-Identifier: GPL-3.0-or-later -->
<!-- Copyright (C) 2025 Edvin svenblad -->
<!DOCTYPE html>
<html lang="sv">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Energideklaration â€“ Print Layout (Bleed!)</title>
  <link rel="stylesheet" href="style.css" media="screen" />
  <style>

    /* Screen-only styles */
    @media screen {
      /* Hide print content */
      #printArea { display: none; }

      /* Two-column layout */
      #screenUI { display: flex; gap: 1rem; padding: 1rem; }
      #dataEntry { flex: 1; display: flex; flex-direction: column; gap: 0.5rem; }

      :root { --preview-scale: 0.42; }
      #previewContainer {
        flex: none;
        width: calc(148.5mm * var(--preview-scale));
        height: calc(210mm * var(--preview-scale));
        box-sizing: content-box;
        border: 3px solid #888;
        background: #000;
        position: relative;
        overflow: hidden;
      }
      #previewContent {
        position: absolute;
        top: 0;
        left: 0;
        width: 148.5mm;
        height: 210mm;
        background: #fff;
        transform: scale(var(--preview-scale));
        transform-origin: top left;
      }

      /* Stack preview below inputs on narrow screens */

    @media screen and (max-width: 30rem) {
      #screenUI { flex-direction: column; }
      #previewContainer { margin: 0 auto; }
      .input-section { grid-template-columns: 1fr; }
    }
      .input-section {
        border: 1px solid var(--border-color);
        padding: 0.5rem;
        margin-bottom: 0.5rem;
        background: var(--form-bg);
        display: grid;
        grid-template-columns: max-content 1fr;
        column-gap: 0.5rem;
        row-gap: 0.5rem;
        align-items: center;
      }
      .input-section label { margin: 0; }
      .input-section input { width: 100%; }

      /* Print button */
      #printButton {
        padding: 1rem;
        font-size: 1.1rem;
        background: #3a8f4e;
        color: #fff;
        border: 1px solid transparent;
        cursor: pointer;
        forced-color-adjust: auto;
      }
      #printButton:hover { background: #287f53; }

    }

    /* Print-only styles */
    @media print {
      /* Hide screen UI */
      #screenUI { display: none !important; }
      @page { margin: 0; size: 148.5mm 210mm; }
      html, body {
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
        font-size: 10pt;
        background: #fff;
        -webkit-print-color-adjust: exact;
        color-adjust: exact;
        forced-color-adjust: none;
      }
      #printArea { display: block; forced-color-adjust: none; }
      #printArea * { forced-color-adjust: none; }
      .container { border: none !important; page-break-inside: avoid; }
      .classes-box { border: 1px solid #000 !important; }
    }

    /* Font classes */
    .font-arial { font-family: Arial, sans-serif; font-weight: normal; }
    .font-arial-bold { font-family: Arial, sans-serif; font-weight: bold; }
    .font-helvetica { font-family: Helvetica, Arial, sans-serif; font-weight: normal; }
    .font-helvetica-bold { font-family: Helvetica, Arial, sans-serif; font-weight: bold; }

    /* Absolute positioning for print elements */
    .container { position: absolute; box-sizing: border-box; padding: 0; }
    .print-line { display: block; min-height: 1em; }
  </style>
</head>
<body>
  <!-- Screen UI -->
  <div id="screenUI">
    <div id="dataEntry">
      <div class="input-section">
        <label id="lbl_p_address" for="addressInput"></label>
        <input type="text" id="addressInput">
        <label id="lbl_p_municipality" for="municipalityInput"></label>
        <input type="text" id="municipalityInput">
        <label id="lbl_p_year" for="yearInput"></label>
        <input type="text" id="yearInput">
        <label id="lbl_p_id" for="idInput"></label>
        <input type="text" id="idInput">
        <label id="lbl_p_energy" for="energyInput"></label>
        <input type="text" id="energyInput">
        <label id="lbl_p_requirement" for="requirementInput"></label>
        <input type="text" id="requirementInput">
        <label id="lbl_p_heating" for="heatingInput"></label>
        <input type="text" id="heatingInput">
        <label id="lbl_p_radon" for="radonInput"></label>
        <input type="text" id="radonInput">
        <label id="lbl_p_ovk" for="ovkInput"></label>
        <input type="text" id="ovkInput">
        <label id="lbl_p_suggestions" for="suggestionsInput"></label>
        <input type="text" id="suggestionsInput">
        <label id="lbl_p_performed" for="performedInput"></label>
        <input type="text" id="performedInput">
        <label id="lbl_p_valid" for="validInput"></label>
        <input type="text" id="validInput">
      </div>
      <button id="printButton" onclick="window.print()"></button>
    </div>
    <div id="previewContainer"><div id="previewContent"></div></div>
  </div>

  <!-- Printable area -->
  <div id="printArea">
    <div style="height:10mm;"></div>
    <div style="position:fixed; top:10mm; left:0; width:148.5mm; height:15mm; background:#000;">
      <div id="summary_prefix" class="font-helvetica" style="position:absolute; top:0; left:15mm; font-size:10pt; color:#fff;"></div>
      <div id="summary_title" class="font-helvetica-bold" style="position:absolute; top:4mm; left:15mm; font-size:30pt; color:#fff;"></div>
    </div>

    <div class="container" style="left:8mm; top:29.5mm; width:73mm; height:12.5mm; font-size:13pt;">
      <div class="print-line"><span id="addressDisplay" class="font-arial"></span></div>
      <div class="print-line"><span id="municipalityDisplay" class="font-helvetica"></span></div>
    </div>
    <div class="container" style="left:8mm; top:42.5mm; width:73mm; height:13.5mm; font-size:10pt;">
      <div class="print-line"><span id="p_year_label" class="font-arial-bold"></span> <span id="yearDisplay" class="font-arial"></span></div>
      <div class="print-line"><span id="p_id_label" class="font-helvetica-bold"></span> <span id="idDisplay" class="font-helvetica"></span></div>
    </div>

    <div class="container classes-box" style="left:8mm; top:56mm; width:73mm; height:90mm; overflow:hidden;">
      <div id="p_classes_heading" class="font-helvetica-bold" style="font-size:11pt; padding:4px;"></div>
      <svg id="energyClasses" width="100%" height="calc(100% - 10mm)" viewBox="0 0 73 90" preserveAspectRatio="xMinYMin meet">
        <title id="energyClassesTitle"></title>
      </svg>
    </div>

    <div class="container" style="left:8mm; top:164mm; width:73mm; height:15.5mm; font-size:10pt;">
      <span id="p_full_declaration" class="font-helvetica-bold"></span><br>
      <span id="p_kept_by_owner" class="font-arial-bold"></span>
    </div>
    <div class="container" style="left:8mm; top:179.5mm; width:73mm; height:10.5mm; font-size:10pt;">
      <span id="p_more_info" class="font-arial-bold"></span><br>
      <span id="p_info_site" class="font-helvetica"></span>
    </div>
    <div class="container" style="left:8mm; top:190.5mm; width:73mm; height:9.5mm; font-size:10pt;">
      <span id="p_summary_law" class="font-arial"></span>
    </div>

    <div class="container" style="left:87.5mm; top:56mm; width:calc(26.5mm - 1.5px); height:26.5mm; overflow:hidden;">
      <svg id="houseSvg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" style="width:100%; height:100%;" preserveAspectRatio="xMinYMin meet">
        <title id="houseSvgTitle"></title>
        <polygon id="houseRoof" stroke="none" />
        <polygon id="houseBody" stroke="none" />
      </svg>
    </div>
    <div class="container" style="left:86mm; top:83.5mm; width:28mm; height:7.5mm; font-size:8pt;">
      <div id="p_building_class" class="font-arial" style="text-align:center;"></div>
    </div>

    <div class="container" style="left:86mm; top:100mm; width:56.5mm; height:110mm; font-size:10pt;">
      <div class="print-line" style="white-space:nowrap;"><strong id="p_energy_label"></strong></div>
      <div class="print-line"><span id="energyDisplay"></span> <span id="p_energy_unit"></span></div>
      <div class="print-line"><strong id="p_requirement_label"></strong></div>
      <div class="print-line"><span id="requirementDisplay"></span></div>
      <div class="print-line"><strong id="p_heating_label"></strong></div>
      <div class="print-line"><span id="heatingDisplay"></span></div>
      <div class="print-line"><strong id="p_radon_label"></strong></div>
      <div class="print-line"><span id="radonDisplay"></span></div>
      <div class="print-line"><strong id="p_ovk_label"></strong></div>
      <div class="print-line"><span id="ovkDisplay"></span></div>
      <div class="print-line"><strong id="p_suggestions_label"></strong></div>
      <div class="print-line"><span id="suggestionsDisplay"></span></div>
      <div class="print-line"><strong id="p_performed_label"></strong></div>
      <div class="print-line"><span id="performedDisplay"></span></div>
      <div class="print-line"><strong id="p_valid_label"></strong></div>
      <div class="print-line"><span id="validDisplay"></span></div>
    </div>
  </div>

  <script src="config.js"></script>
  <script src="strings.js"></script>
  <script src="localization.js"></script>
  <script src="glue.js"></script>
  <script>

    function applyPrintUiStrings() {
      document.documentElement.lang = window.SELECTED_LANG;
      const labels = {
        lbl_p_address: 'address_label',
        lbl_p_municipality: 'municipality_label',
        lbl_p_year: 'year_label',
        lbl_p_id: 'id_label',
        lbl_p_energy: 'energy_label',
        lbl_p_requirement: 'requirement_label',
        lbl_p_heating: 'heating_label',
        lbl_p_radon: 'radon_label',
        lbl_p_ovk: 'ovk_label',
        lbl_p_suggestions: 'suggestions_label',
        lbl_p_performed: 'performed_label',
        lbl_p_valid: 'valid_label'
      };
      for (const [id,key] of Object.entries(labels)) {
        const el = document.getElementById(id);
        if (el) el.textContent = getPrintUiString(key);
      }

      const placeholders = {
        addressInput: 'address_placeholder',
        municipalityInput: 'municipality_placeholder',
        yearInput: 'year_placeholder',
        idInput: 'id_placeholder',
        energyInput: 'energy_placeholder',
        requirementInput: 'requirement_placeholder',
        heatingInput: 'heating_placeholder',
        radonInput: 'radon_placeholder',
        ovkInput: 'ovk_placeholder',
        suggestionsInput: 'suggestions_placeholder',
        performedInput: 'performed_placeholder',
        validInput: 'valid_placeholder'
      };
      for (const [id,key] of Object.entries(placeholders)) {
        const inp = document.getElementById(id);
        if (inp) inp.placeholder = getPrintUiString(key);
      }

      const btn = document.getElementById('printButton');
      if (btn) btn.textContent = getPrintUiString('print_button');
    }

    function applyPrintStrings() {
      const map = {
        summary_prefix: 'summary_of',
        summary_title: 'title',
        p_year_label: 'year_label',
        p_id_label: 'id_label',
        p_classes_heading: 'classes_heading',
        p_full_declaration: 'full_declaration',
        p_kept_by_owner: 'kept_by_owner',
        p_more_info: 'more_info',
        p_info_site: 'info_site',
        p_summary_law: 'summary_law',
        p_building_class: 'building_class',
        p_energy_label: 'energy_label',
        p_energy_unit: 'energy_unit',
        p_requirement_label: 'requirement_label',
        p_heating_label: 'heating_label',
        p_radon_label: 'radon_label',
        p_ovk_label: 'ovk_label',
        p_suggestions_label: 'suggestions_label',
        p_performed_label: 'performed_label',
        p_valid_label: 'valid_label'
      };
      for (const [id,key] of Object.entries(map)) {
        const el = document.getElementById(id);
        if (el) el.innerHTML = getPrintString(key);
      }
    }

    function generateName(address, id) {
      // Normalize to NFD so diacritics become separate codepoints and then
      // strip them (\u0300-\u036f matches combining marks). We also map
      // common Ã…, Ã„, Ã– characters to plain a/o for local audience.
      const translit = str =>
        str.normalize('NFD')
           .replace(/[\u0300-\u036f]/g, '')
           .replace(/[Ã¥Ã¤Ã…Ã„]/g, 'a')
           .replace(/[Ã¶Ã–]/g, 'o');

      const sanitize = str =>
        translit(str)
          .replace(/\s+/g, '_')
          .replace(/[^0-9A-Za-z_-]/g, '');

      const safeId = sanitize(String(id || ''));
      let safeAddr = sanitize(String(address || '')); 
      if (safeAddr.length > CONFIG.PRINTING.NAME_LIMITS.ADDRESS) {
        safeAddr = safeAddr.slice(0, CONFIG.PRINTING.NAME_LIMITS.ADDRESS);
      }

      let base = `energideklaration-${safeId}-${safeAddr}`;
      if (base.length + 4 > CONFIG.PRINTING.NAME_LIMITS.FILENAME) {
        const excess = base.length + 4 - CONFIG.PRINTING.NAME_LIMITS.FILENAME;
        base = base.slice(0, base.length - excess);
      }
      return base + '.pdf';
    }

    function updateFileName() {
      const address = document.getElementById('addressInput').value;
      const id = document.getElementById('idInput').value;
      const name = generateName(address, id);
      document.title = name;
    }

    document.addEventListener('DOMContentLoaded', () => {
      detectLang();
      applyPrintUiStrings();
      applyPrintStrings();
      const tEnergy = document.getElementById('energyClassesTitle');
      if (tEnergy) tEnergy.textContent = getPrintString('classes_svg_title');
      const tHouse = document.getElementById('houseSvgTitle');
      if (tHouse) tHouse.textContent = getPrintString('house_svg_title');

      const labels = Object.keys(window.EPClass.data);
      const colors = labels.map(l => window.EPClass.data[l].colour);
      let noReq = false;
      const base = CONFIG.PRINTING.CLASS_LAYOUT;
      const config = {
        labels,
        colors,
        highlightIdx: 0,
        container: base.container,
        margins: base.margins,
        arrow: base.arrow,
        letterOffset: base.letterOffset,
        outline: base.outline,
        house: base.house
      };
      // Bind inputs to displays
      const bind = (inputId, displayId) => {
        const inp = document.getElementById(inputId);
        const disp = document.getElementById(displayId);
        const setDisp = () => {
          let val = inp.value;
          if (CONFIG.FEATURES.NOREQ_NACLASS && inputId === 'requirementInput' &&
              parseFloat(val) >= CONFIG.CONSTANTS.NOREQ_VALUE) {
            disp.textContent = getString('na_label');
          } else {
            disp.textContent = val;
          }
        };
        const handler = () => { setDisp(); updateAll(); };
        inp.addEventListener('input', handler);
        setDisp();
      };
      ['addressInput','municipalityInput','yearInput','idInput',
       'energyInput','requirementInput','heatingInput','radonInput',
       'ovkInput','suggestionsInput','performedInput','validInput'].forEach(id => {
        bind(id, id.replace('Input','Display'));
      });

      // Prefill fields from query parameters
      const params = new URLSearchParams(window.location.search);
      const paramMap = {
        address: 'addressInput',
        municipality: 'municipalityInput',
        year: 'yearInput',
        id: 'idInput',
        ep: 'energyInput',
        eplim: 'requirementInput',
        heating: 'heatingInput',
        radon: 'radonInput',
        ovk: 'ovkInput',
        suggestions: 'suggestionsInput',
        performed: 'performedInput',
        valid: 'validInput'
      };
      for (const [p, id] of Object.entries(paramMap)) {
        const inp = document.getElementById(id);
        const val = params.get(p);
        if (inp && val !== null) {
          inp.value = val;
          inp.dispatchEvent(new Event('input'));
        }
      }

      const typeMap = {
        SMALL: 'option_housetype_SMALL',
        MULTI: 'option_housetype_MULTI',
        LOCAL: 'option_housetype_LOCAL'
      };
      const typeParam = (params.get('housetype') || '').toUpperCase();
      const typeKey = typeMap[typeParam];
      if (typeKey) {
        const clsHead = document.getElementById('p_classes_heading');
        if (clsHead) {
          clsHead.textContent += ' â€“ ' + getString(typeKey);
        }
      }

      const roof = document.getElementById('houseRoof'), body = document.getElementById('houseBody');
      const rt = config.house.roofThickness, rg = config.house.roofGap;
      roof.setAttribute('points', [[0,50],[50,0],[100,50],[100-rt,50],[50,rt],[rt,50]].map(p=>p.join(',')).join(' '));
      body.setAttribute('points', [[rt,100],[100-rt,100],[100-rt,50+rg],[50,rt+rg],[rt,50+rg]].map(p=>p.join(',')).join(' '));
      const houseSvg = document.getElementById('houseSvg');
      const houseLetter = document.createElementNS(houseSvg.namespaceURI, 'text');
      houseLetter.setAttribute('x', 50 + config.house.letterOffset.x);
      houseLetter.setAttribute('y', 55 + config.house.letterOffset.y);
      houseLetter.setAttribute('font-size', `${config.house.fontSize}pt`);
      houseLetter.setAttribute('fill', '#000');
      houseLetter.setAttribute('font-weight', 'bold');
      houseLetter.setAttribute('text-anchor', 'middle');
      houseLetter.setAttribute('dominant-baseline', 'middle');
      houseSvg.appendChild(houseLetter);
      const svg = document.getElementById('energyClasses');

      function drawVisuals() {
        const n = config.labels.length;
        const hAvail = config.container.height - config.margins.top - config.margins.bottom - (n-1) * config.margins.gap;
        const arrowH = hAvail / n;
        const tipW = arrowH * Math.sqrt(3) / 2;

        svg.innerHTML = '';
        const clsTitle = document.createElementNS(svg.namespaceURI, 'title');
        clsTitle.id = 'energyClassesTitle';
        clsTitle.textContent = getPrintString('classes_svg_title');
        svg.appendChild(clsTitle);
        if (!noReq) {
          roof.setAttribute('fill', config.colors[config.highlightIdx]);
          body.setAttribute('fill', config.colors[config.highlightIdx]);
          houseLetter.textContent = config.labels[config.highlightIdx];

          const sy = config.margins.top + config.highlightIdx * (arrowH + config.margins.gap);
          const wSel = config.arrow.minNorm * config.container.width + config.highlightIdx * ((config.arrow.maxNorm - config.arrow.minNorm) * config.container.width / (n-1));
          const selPts = [[0,sy],[wSel,sy],[wSel+tipW,sy+arrowH/2],[wSel,sy+arrowH],[0,sy+arrowH]].map(p=>p.join(',')).join(' ');
          [{color:'#000',width:config.outline.black},{color:'#fff',width:config.outline.white}].forEach(o => {
            const pElem = document.createElementNS(svg.namespaceURI,'polygon');
            pElem.setAttribute('points', selPts);
            pElem.setAttribute('fill','none');
            pElem.setAttribute('stroke', o.color);
            pElem.setAttribute('stroke-width', o.width);
            svg.appendChild(pElem);
          });
        } else {
          roof.setAttribute('fill', '#ccc');
          body.setAttribute('fill', '#ccc');
          houseLetter.textContent = getString('na_label');
        }
        config.labels.forEach((lbl, idx) => {
          const y = config.margins.top + idx * (arrowH + config.margins.gap);
          const w = config.arrow.minNorm * config.container.width + idx * ((config.arrow.maxNorm - config.arrow.minNorm) * config.container.width / (n-1));
          const pts = [[0,y],[w,y],[w+tipW,y+arrowH/2],[w,y+arrowH],[0,y+arrowH]].map(p=>p.join(',')).join(' ');
          const poly = document.createElementNS(svg.namespaceURI,'polygon');
          poly.setAttribute('points', pts);
          poly.setAttribute('fill', config.colors[idx]);
          svg.appendChild(poly);
          const txt = document.createElementNS(svg.namespaceURI,'text');
          txt.setAttribute('x', w + tipW/2 + config.letterOffset.x);
          txt.setAttribute('y', y + arrowH/2 + config.letterOffset.y);
          txt.setAttribute('font-size', `${config.arrow.fontSize}pt`);
          txt.setAttribute('fill', '#000');
          txt.setAttribute('text-anchor','middle');
          txt.setAttribute('dominant-baseline','middle');
          txt.textContent = lbl;
          svg.appendChild(txt);
        });
      }

      function computeClass() {
        const limRaw = parseFloat(document.getElementById('requirementInput').value);
        noReq = CONFIG.FEATURES.NOREQ_NACLASS && !isNaN(limRaw) && limRaw >= CONFIG.CONSTANTS.NOREQ_VALUE;
        if (noReq) return;
        const ep = parseFloat(document.getElementById('energyInput').value);
        const cls = window.EPClass.classify(ep, limRaw);
        const idx = config.labels.indexOf(cls);
        if(idx !== -1) config.highlightIdx = idx;
      }

      function updatePreview() {
        const preview = document.getElementById('previewContent');
        preview.innerHTML = document.getElementById('printArea').innerHTML;
      }

      function updateAll(){
        updateFileName();
        computeClass();
        drawVisuals();
        updatePreview();
      }

      updateAll();
    });
  </script>
</body>
</html>
